# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "damienbutt"
repo = "emojify-go"

[changelog]
# template for the changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{%- macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))
{%- endmacro -%}

{%- if version -%}
    {%- if previous.version -%}
        ## [{{ version | trim_start_matches(pat="v") }}]({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {%- else -%}
        ## [{{ version | trim_start_matches(pat="v") }}]({{ self::remote_url() }}/tree/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {%- endif -%}
{% endif %}

{%- if previous.version -%}
    {%- for group, commits in commits | group_by(attribute="group") %}

        ### {{ group | striptags | trim | upper_first }}
        {%- for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
            {{ self::print_commit(commit=commit) }}
        {%- endfor %}
        {%- for commit in commits %}
            {% if not commit.scope %}
                {{ self::print_commit(commit=commit) }}
            {%- endif %}
        {%- endfor %}
    {%- endfor -%}
{% else %}

### 🎉🎉 Initial Release

First official release of emojify-go, a lighting fast Emoji converter for the command line 😱.
{%- endif %}

{%- if github %}
    {%- set excluded_users = ["Norgate-AV", "damienbutt", "actions-user", "github-actions", "github-actions[bot]"] %}
    {%- set first_time_contributors = [] %}
    {%- for contributor in github.contributors %}
        {%- if contributor.is_first_time %}
            {%- if contributor.username not in excluded_users %}
                {%- set first_time_contributors = first_time_contributors | concat(with=[contributor]) %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- if first_time_contributors | length != 0 %}
        ## New Contributors ❤️
        {%- for contributor in first_time_contributors %}
            * @{{ contributor.username }} made their first contribution
            {%- if contributor.pr_number %} in [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }})
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endif %}
"""
# template for the changelog footer
footer = """
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/damienbutt/emojify-go" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->🚀 Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->📚 Documentation", skip = true },
    { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 2 -->🚜 Refactor", skip = true },
    { message = "^style", group = "<!-- 5 -->🎨 Styling", skip = true },
    { message = "^test", group = "<!-- 6 -->🧪 Testing", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks", skip = true },
    { body = ".*security", group = "<!-- 8 -->🛡️ Security", skip = true },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert", skip = true },
    { message = ".*", group = "<!-- 10 -->💼 Other", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v?[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true
initial_tag = "1.0.0"

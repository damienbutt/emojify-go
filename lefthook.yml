pre-commit:
  parallel: true
  commands:
    # Go formatting
    go-fmt:
      glob: "*.go"
      run: |
        go fmt ./...
        git add .

    # Go module tidying
    go-mod-tidy:
      files: git diff --name-only --cached
      glob: "{go.mod,go.sum}"
      run: |
        go mod tidy
        git add go.mod go.sum

    # Go vetting
    go-vet:
      glob: "*.go"
      run: |
        go vet ./...

    # Go linting
    golangci-lint:
      glob: "*.go"
      run: |
        go tool golangci-lint run --fix
        git add .

    # Run tests
    go-test:
      glob: "*.go"
      run: |
        go test ./...

    # Trailing whitespace and other file checks
    trailing-whitespace:
      glob: "*.{go,md,yml,yaml,txt,sh,js,ts,css,html,json,xml}"
      run: |
        if grep -r '[[:space:]]$' {staged_files}; then
          echo "❌ Found trailing whitespace in staged files"
          exit 1
        fi

    # Check for merge conflicts
    merge-conflicts:
      glob: "*"
      exclude: "lefthook.yml"
      run: |
        # Define conflict markers as variables to avoid self-detection
        CONFLICT_START="<<<<<<<"
        CONFLICT_SEP="======="
        CONFLICT_END=">>>>>>>"

        if grep -r "${CONFLICT_START} \|${CONFLICT_SEP}$\|${CONFLICT_END} " {staged_files}; then
          echo "❌ Found merge conflict markers in staged files"
          echo "Please resolve all conflicts before committing"
          exit 1
        fi

pre-push:
  parallel: true
  commands:
    # Run comprehensive tests before push
    go-test-race:
      run: |
        go test -race ./...

    # Security scan
    gosec:
      run: |
        if command -v gosec >/dev/null 2>&1; then
          go tool gosec ./...
        else
          echo "⚠️  gosec not installed, skipping security scan"
        fi

    # Vulnerability check
    govulncheck:
      run: |
        if command -v govulncheck >/dev/null 2>&1; then
          go tool govulncheck ./...
        else
          echo "⚠️  govulncheck not installed, skipping vulnerability check"
        fi

commit-msg:
  commands:
    # Conventional commit format validation
    commitizen:
      interactive: false
      run: |
        # Get the commit message file path
        COMMIT_MSG_FILE="{1}"

        # Check if file exists and is readable
        if [ ! -f "$COMMIT_MSG_FILE" ] || [ ! -r "$COMMIT_MSG_FILE" ]; then
          echo "⚠️  Cannot read commit message file, skipping validation"
          exit 0
        fi

        # Read the commit message (first line only)
        COMMIT_MSG=$(head -n1 "$COMMIT_MSG_FILE" 2>/dev/null || echo "")

        # Skip if empty commit message
        if [ -z "$COMMIT_MSG" ]; then
          echo "⚠️  Empty commit message, skipping validation"
          exit 0
        fi

        # Skip if it's a merge commit
        if echo "$COMMIT_MSG" | grep -q '^Merge branch\|^Merge pull request'; then
          echo "ℹ️  Merge commit detected, skipping validation"
          exit 0
        fi

        # Check if the commit message follows conventional commits format
        commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?(!)?: .{1,50}'

        if ! echo "$COMMIT_MSG" | grep -qE "$commit_regex"; then
          echo ""
          echo "❌ Invalid commit message format!"
          echo ""
          echo "Commit messages must follow the Conventional Commits specification:"
          echo "  <type>[optional scope]: <description>"
          echo ""
          echo "Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert"
          echo ""
          echo "Examples:"
          echo "  feat: add new TUI navigation component"
          echo "  fix(installer): resolve disk partition detection"
          echo "  docs: update installation instructions"
          echo "  feat!: introduce breaking API changes"
          echo ""
          echo "Your commit message:"
          echo "  '$COMMIT_MSG'"
          echo ""
          exit 1
        fi

        # Check commit message length
        if [ ${#COMMIT_MSG} -gt 72 ]; then
          echo "❌ Commit message is too long (> 72 characters)"
          echo "Current length: ${#COMMIT_MSG} characters"
          echo "Your commit message:"
          echo "  '$COMMIT_MSG'"
          exit 1
        fi

        echo "✅ Commit message format is valid"
    spell-check:
      run: ./scripts/spellcheck-commit.sh {1}

# Skip lefthook execution for merge commits
skip_output:
  - meta
  - execution

colors: true

output:
  - execution_out
  - execution_info
  - summary
